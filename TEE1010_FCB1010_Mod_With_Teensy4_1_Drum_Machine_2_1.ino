/* FCB 1010 Teensy 4.1 Modification  -----
    TEE1010
  By John Melki-Wegner (aka Expensive Notes)
  Drum Machine For Guitarists/Bassists

*/

#include <EEPROM.h>
//=== Audio ========================================================================= Audio

//Design Tool: https://www.pjrc.com/teensy/gui/
#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

// GUItool: begin automatically generated code
AudioPlayMemory          playMemCrash;   //xy=92,563
AudioPlayMemory          playMemRide;    //xy=94,619
AudioPlayMemory          playMemOHh;     //xy=98,518
AudioPlayMemory          playMemSnare;   //xy=99,348
AudioPlayMemory          playMemCHh;     //xy=102,466
AudioPlayMemory          playMemKick;    //xy=106,297
AudioMixer4              mixerDrums;     //xy=460,540
AudioMixer4              mixerOut;       //xy=847,326
AudioOutputI2S           i2s2;           //xy=1024,330
AudioConnection          patchCord1(playMemCrash, 0, mixerDrums, 2);
AudioConnection          patchCord2(playMemRide, 0, mixerDrums, 3);
AudioConnection          patchCord3(playMemOHh, 0, mixerDrums, 1);
AudioConnection          patchCord4(playMemSnare, 0, mixerOut, 2);
AudioConnection          patchCord5(playMemCHh, 0, mixerDrums, 0);
AudioConnection          patchCord6(playMemKick, 0, mixerOut, 1);
AudioConnection          patchCord7(mixerDrums, 0, mixerOut, 3);
AudioConnection          patchCord8(mixerOut, 0, i2s2, 0);
AudioConnection          patchCord9(mixerOut, 0, i2s2, 1);
AudioControlSGTL5000     sgtl5000_1;     //xy=714,49
// GUItool: end automatically generated code

//== Drums Stuff =========================================================================

//Sound files generated by wav2sketch program. https://www.pjrc.com/teensy/gui/?info=AudioPlayMemory
#include "AcousticKick.h"
#include "AcousticSnare.h"
#include "AcousticClosedhihat.h"
#include "AcousticOpenhihat.h"
#include "AcousticCrashcymbal.h"
#include "AcousticRidecymbal.h"

bool drumsOn = false; //Are drums playing
bool ExpressionPedalCanUpDateDrumPattern = false; //used to ignore Expression Pedal value until the pedal "picks Up" the same value as currently set by switches (or pedal)

int barLength [7] = {16, 16, 24, 16, 24, 16, 20};
int beatStyle = 1;
char beatString [7] [7] = {"Bop", "4/4", "12/8", "Jazz", "Swing", "Misc", "5/4"};
int BPMcountDown = 0; //screen delay for showing BPM
int countInPauseCountDown = 0; //allows for quick restart of beat without countin even when the countin is enabled

//Using Character strings to store drum patterns so they are easy to make while coding
// for 4/4 use 16 beats. See barlength above. You could probably make your own...
//My patterns are at the bottom of this file
char kickSequence[] =       "........................";
char snareSequence[] =      "........................";
char hiHatSequence[] =      "........................";
char openHiHatSequence[] =  "........................";
char crashSequence[] =      "........................";
char rideSequence[] =       "........................";
char fillKickSequence[] =    "........................";
char fillLowTomSequence[] =  "........................";
char fillLowHighSequence[] = "........................";

bool countIn = true; //standard count in
int toggleSwitchState = 0, previousToggleSwitchState = 0; //to deal with a switch change of state
int patternComplexity = 1; //Drum pattern patternComplexity. Goes from 0 to 4 - Shows as 1 to 4 on the display

int beatProbability = 0; //Used to determine the probability of extra beats. This is the humanity
int beatIndex = 0;

float instrumentVolume [4] = {1.0, 1.0, 0.5, 0.3};
float backUpHiHatVolume = 0.5; //store current volume while there is a temporary change for complexity 0

// ===== Hardware =================================================================== Hardware

// ---- Analogue -------------------------------------------------------------------- Analogue
int potPin [6] = {A0, A8, A14, A15, A16, A17};   // Input pins from the 4 potentiometers and from pins 16 and 17, the expression pedals
int potVals [6]; //input values read from pots

// ---- Switches -------------------------------------------------------------------- Switches
#define numberSwitches 15

//define switch names
#define foot1 0
#define foot2 1
#define foot3 2
#define foot4 3
#define foot5 4
#define foot6 5
#define foot7 35  //should be 30 to match Video 2. I had an issue with a wire snapping off. Pin 30 was awkward to get to
#define foot8 31
#define foot9 32
#define foot10 33
#define footUp 36
#define footDown 37
#define button1 26
#define button2 27
#define button3 34
//define names for switches that fit their purpose
#define switch9 8
#define setStyleSwitch 9
#define StopStartSwitch 10  //This is down arrow on FCB10101
#define toggleCountInMode 11 //This is up arrow
#define toggleVolumeScreenSwitch 12  //Momentary switches next to screen
#define resetCountDownPauseSwitch 13
#define toggleBPMViaStompSwitch 14 //added a stomp switch instead of the third momentary switch

//Storage for Buttons/Foot Pedals
const int switchPins[numberSwitches] = {foot1,  foot2, foot3, foot4, foot5, foot6, foot7, foot8, foot9, foot10, footUp, footDown, button1, button2, button3}; // Note that the last five positions represent footUp, footDown and the three additional switches respectively
int previousSwitchValues [numberSwitches]; //Not using bounce library due to varying length of waitTimes
int switchValues [numberSwitches];

//--- Oled Screen ------------------------------------------------------------------- Oled Screen
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     4 // Reset pin # 
#define SCREEN_ADDRESS 0x3C // Found using scanner
#define I2Cspeed 1000000 //Increased from the default speed. Anything above this doesn't seem to improve things

//Initialize OLED screen. Changed Wire to Wire2 for SCL2 and SDA2
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire2, OLED_RESET, I2Cspeed);

/*Screen Mode
  0 = BPM patternComplexity Humanity Style
  1 = BPM
  2 = Style
  3 = Volume
  4 = Free play
  5 = Enter BPM using numbers
*/
int screenMode = 0;
int flashText = 6;

// === Timing ========================================================================= Timing

int t1, t2; //Times to make sure the BPM waittime is consistent.
int waitTime = 40; //Time between beats

//Music Stuff
int BPM = 120;  //Beats per Minute
int BPMInput [3] = {0, 0, 0};   //For manual input of BPM
int BPMIndex = 0;     //Index for manual entry of BPM via footswitches

// ==== SetUp ======================================================================= SetUp
void setup() {
  //USB Serial for debugging
  Serial.begin(9600);                     // Serial USB Monitor for testing

  //--- Switch modes --------------------------------------------
  for (int i = 0; i < numberSwitches; i++) {
    pinMode(switchPins[i], INPUT_PULLUP);
  }

  for (int i = 0; i < 10; i++) {
    switchValues[i] = HIGH; //indicate not pressed
    previousSwitchValues[i] = HIGH; //indicate not previously pressed
  }

  //--- Screen ------------------------------------------------
  //   SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }

  //--- Audio -----------------------------------------------
  AudioMemory(10);        // 10 is more than enough for one lot of drums
  sgtl5000_1.enable();    //Using Line Out so don't need to set volume for this. I added a hardware potentiometer to line out to control level

  setinstrumentVolumes();
  setDrums(); //Put a pattern into the playing strings
  //----- Probability seed - Generate Random Numbers
  randomSeed(analogRead(10));     //using a floating pin on back of Teensy - not connected

  //What is the initial state of the stomp switch
  previousToggleSwitchState = digitalRead(34); //So setting of BPM doesn't start automatically as I am using a toggle switch instead of a momentary switch
}

// === Loop ========================================================================= Loop

void loop() {
  t1 = millis();              //Get start time for a consistent delay
  adjustPauseCountDowns();
  readSwitches();
  if (screenMode == 3) alterDrumVolumes();
  setinstrumentVolumes();
  display.clearDisplay();
  drawScreen();
  display.display();         //Takes 28ms at 400kHz or 12ms at 1MHz (I2C)
  waitForNextbeat();
  if (drumsOn) playbeats();
}

// ===  Functions ===============================================================

void adjustPauseCountDowns() {
  //This is to show the BPM screen for a set time
  if (BPMcountDown > 0) BPMcountDown--;
  //if showing BPM screen stop after a bar
  if (screenMode == 1 && BPMcountDown == 0) screenMode = 0;

  //When the pattern is stopped I temporarily turn off the "count in" so the switches can be used for free play instead of changing complexity
  //give time to restart a beat if in the middle of a song without the countin
  if (countInPauseCountDown > 0) countInPauseCountDown--;
}

void waitForNextbeat() {
  t2 = millis();                                        //To enable the calculation of how long have the previous tasks taken
  waitTime = int(60000 / BPM / 4 );
  if (barLength[beatStyle] == 24) waitTime = int(60000 / BPM / 6 ); // 12/8 needs 24 subdivisions to get the 3/4 feel
  while (t2 - t1 < waitTime) {
    checkExpressionPedals();   //While waiting to play the next beat check Expression pedals so they have a more instant response
    t2 = millis();
  }
}


// === Screen Functions =========================================================

void drawScreen() {
  /*Screen Mode
    0 = BPM patternComplexity Humanity Style
    1 = BPM
    2 = Style
    3 = Volume
    4 = Free play
    5 = Enter BPM using numbers
  */
  switch (screenMode) {
    case 0: //This is Foot switch 1 on the FCB1010
      playScreen();
      break;
    case 1:
      BPMScreen();
      break;
    case 2:
      styleScreen();
      break;
    case 3:
      volumeScreen();
      break;
    case 4:
      freePlayScreen();
      break;
    case 5:
      manualBPMScreen();
      break;
    default:
      playScreen();
      break;
  }
}

void volumeScreen() {
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(2);
  display.setCursor(0, 0);
  display.print("Kick ");
  display.println(instrumentVolume[0]);
  display.print("Snar ");
  display.println(instrumentVolume[1]);
  display.print("HHat ");
  display.println(instrumentVolume[2]);
  display.print("Cymb ");
  display.print(instrumentVolume[3]);
}

void styleScreen() {
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.setTextSize(4);
  display.println("1- 7");
  display.setTextSize(2);
  display.setCursor(10, 40);
  display.println("Yellow");
}

void BPMScreen() {
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(6);
  display.setCursor(0, 0);
  display.print(BPM);
}

void manualBPMScreen() {
  display.setTextSize(6);
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_WHITE);
  display.print(BPMInput[0]);
  display.print(BPMInput[1]);
  display.print(BPMInput[2]);
  display.fillRect(BPMIndex * 36, 55, 32, 5, SSD1306_WHITE);
}

void freePlayScreen() {
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(3);
  display.setCursor(0, 0);
  display.print(BPM);
  if (flashText < 6) {
    display.setCursor(75, 0);
    display.setTextSize(4);
    display.print("FP");
  }
  flashText--;
  if (flashText <= 0) flashText = 10;
  showBeatTypeAndCountInState();
}

void playScreen() {
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(3);
  display.setCursor(0, 0);
  display.print(BPM);
  display.setTextSize(4);
  display.setCursor(70, 0);
  display.print(patternComplexity + 1);
  display.setCursor(104, 0);
  display.print(beatProbability);
  showBeatTypeAndCountInState();
  int xBeat = beatIndex / 4;
  if (barLength[beatStyle] == 24) xBeat = beatIndex / 6;
  if (barLength[beatStyle] == 20) xBeat = beatIndex / 5;
  display.fillRect(xBeat * 35, 58, 20, 5 , SSD1306_WHITE);
}

void showBeatTypeAndCountInState() {
  display.setCursor(0, 38);
  display.setTextSize(2);
  display.print(beatString[beatStyle]);
  //display state of count in.  Black on white == enabled. white on black == temporarily disabled
  if (countIn && countInPauseCountDown == 0) {
    display.fillRect(63, 35, 62, 20, SSD1306_WHITE);
    display.setTextColor(SSD1306_BLACK);
    display.setCursor(65, 38);
    display.print("count");
  } else if (countIn && countInPauseCountDown > 0) {
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(65, 38);
    display.print("count");
  }
}


// === Change the way switches input depending on Screen Mode ======================================================

void readSwitches() {
  //Check the Foot Switches 1 to 10 and momentary switches 11 to 14 ----------------------
  for (int footPedal = 0; footPedal < 15; footPedal++) {
    switchValues[footPedal] = digitalRead(switchPins[footPedal]);
    //Switch pressed?
    if (switchJustPressed(footPedal)) {
      switch (screenMode) {
        case 0: //This is Foot switch 1 on the FCB1010
          processSwitchesWhilePlaying(footPedal);
          break;
        case 1:
          processSwitchesWhilePlaying(footPedal);
          break;
        case 2:
          processSwitchesForBeatStyle(footPedal);
          break;
        case 3:
          processSwitchesWhilePlaying(footPedal);
          break;
        case 4:
          processSwitchesForFreePlay(footPedal);
          break;
        case 5:
          chooseBPMManually(footPedal);
          break;
      }
      previousSwitchValues[footPedal] = LOW;
    }
    if (switchJustReleased(footPedal)) {
      previousSwitchValues[footPedal] = HIGH;
    }
  }
  if (!drumsOn) checkEasterEggs();
  checkStompSwitch();
}

void checkStompSwitch() {
  toggleSwitchState = digitalRead(34);
  //Enable manual BPM entry
  if (toggleSwitchState != previousToggleSwitchState) {
    previousToggleSwitchState = toggleSwitchState;
    startBPMInput();
  }
}

void  checkEasterEggs() {
  //easter egg
  if (switchValues[1] == LOW && switchValues[3] == LOW && !drumsOn)  someoneToldAJoke(); //Badam Tish
}
void processSwitchesForFreePlay(int footPedal) {
  switch (footPedal) {
    case 0: //This is Foot switch 1 on the FCB1010
      playBigEnding();
      countInPauseCountDown = 50;
      break;
    case 1:
      // Kick
      playMemKick.play(Acoustickick);
      countInPauseCountDown = 50;
      break;
    case 2:
      //Open ride
      playMemRide.play(Acousticridecymbal);
      countInPauseCountDown = 50;
      break;
    case 3:
      playMemRide.play(AcousticClosedhihat);
      playMemKick.play(Acoustickick);
      playMemSnare.play(AcousticSnare);
      countInPauseCountDown = 50;
      break;
    case 4:
      //CRASH
      playMemKick.play(Acoustickick);
      playMemSnare.play(AcousticSnare);
      playMemCrash.play(AcousticCrashcymbal);
      countInPauseCountDown = 50;
      break;
    case 5:
      BPM = BPM - 5;
      screenMode = 1;
      BPMcountDown = 16;
      break;
    case 6:
      BPM = BPM + 5;
      screenMode = 1;
      BPMcountDown = 16;
      break;
    case 7:
      BPM = BPM - 1;
      screenMode = 1;
      BPMcountDown = 16;
      break;
    case switch9:  //8
      BPM = BPM + 1;
      screenMode = 1;
      BPMcountDown = 16;
      break;
    case setStyleSwitch: //9
      screenMode = 2;
      break;
    case StopStartSwitch: //10 - Stop Start Drums
      if (!drumsOn && countIn)  doTheCountIn();
      drumsOn = !drumsOn;
      if (!drumsOn) {
        screenMode = 4;
        countInPauseCountDown = 50;
      }
      else screenMode = 0;
      beatIndex = 0;
      break;
    case toggleCountInMode:  //11
      countIn = !countIn;
      break;
    case toggleVolumeScreenSwitch:    //12
      if (screenMode == 3) screenMode = 0;
      else screenMode = 3;
      break;
    case resetCountDownPauseSwitch:    //13 - Don't want to wait for the timer
      countInPauseCountDown = 0;
      break;
    default:
      break;
  }
  setinstrumentVolumes();
}

void startBPMInput() {
  BPMInput[0] = 0;
  BPMInput[1] = 0;
  BPMInput[2] = 0;
  screenMode = 5;
}

void stopBPMInput() {
  if (BPMIndex == 1) BPM = BPMInput[2];
  if (BPMIndex == 2) BPM = BPMInput[0] * 10 + BPMInput[1];
  if (BPMIndex == 3) {
    BPM = BPMInput[0] * 100 + BPMInput[1] * 10 + BPMInput[2];
    BPMcountDown = 16;
  }
  if (BPM < 50) BPM = 50;
  screenMode = 0;
  BPMIndex = 0;
}

void chooseBPMManually(int footPedal) {
  //Manual input of BPM using numbered footswitches
  if (footPedal < 9) {
    BPMInput [BPMIndex] = footPedal + 1;
    BPMIndex++;
    if (BPMIndex > 2) stopBPMInput();
  }
  switch (footPedal) {
    case 9: //This is pedal 10 which I am using for 0
      BPMInput [BPMIndex] = 0;
      BPMIndex++;
      if (BPMIndex > 2) stopBPMInput();
      break;
    case StopStartSwitch: //10 - Stop Start Drums
      if (!drumsOn && countIn)  doTheCountIn();
      drumsOn = !drumsOn;
      if (!drumsOn) screenMode = 4;
      else screenMode = 0;
      beatIndex = 0;
      break;
    case toggleCountInMode:   //11
      countIn = !countIn;
      break;
    case toggleVolumeScreenSwitch:    //12
      if (screenMode == 3) screenMode = 0;
      else screenMode = 3;
      break;
    case resetCountDownPauseSwitch:    //13
      countInPauseCountDown = 0;
      break;
    default:
      break;
  }
  setinstrumentVolumes();
}

void processSwitchesForBeatStyle(int footPedal) {
  switch (footPedal) {
    case 0: //This is Foot switch 1 on the FCB1010
      // 4/4
      if (!drumsOn) BPM = 130; //don't change BPM if currently playing
      screenMode = 0;
      beatStyle = 1; //Rock
      patternComplexity = 2;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 1:
      //Swing
      if (!drumsOn) BPM = 120;
      screenMode = 0;
      beatStyle = 4; //Swing
      patternComplexity = 2;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 2:
      //Bop - Beatles, Black Keys etc.
      if (!drumsOn) BPM = 150;
      screenMode = 0;
      beatStyle = 0;
      patternComplexity = 1;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 3:
      //Jazz
      if (!drumsOn) BPM = 120;
      screenMode = 0;
      beatStyle = 3;
      patternComplexity = 1;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 4:
      //Slow Blues
      if (!drumsOn) BPM = 70;
      screenMode = 0;
      beatStyle = 2;
      patternComplexity = 2;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 5:
      // Misc
      if (!drumsOn) BPM = 120;
      screenMode = 0;
      beatStyle = 5;
      patternComplexity = 1;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 6:
      // 5/4
      if (!drumsOn) BPM = 120;
      screenMode = 0;
      beatStyle = 6;
      patternComplexity = 1;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 7:
      BPM = BPM - 1;
      screenMode = 1;
      BPMcountDown = 16;
      break;
    case switch9:  //8
      BPM = BPM + 1;
      screenMode = 1;
      BPMcountDown = 16;
      break;
    case setStyleSwitch: //9
      screenMode = 2;
      break;
    case StopStartSwitch: //10 - Stop Start Drums
      if (!drumsOn && countIn)  doTheCountIn();
      drumsOn = !drumsOn;
      if (!drumsOn) screenMode = 4;
      else screenMode = 0;
      beatIndex = 0;
      break;
    case toggleCountInMode:   //11
      countIn = !countIn;
      break;
    case toggleVolumeScreenSwitch:    //12
      if (screenMode == 3) screenMode = 0;
      else screenMode = 3;
      break;
    case resetCountDownPauseSwitch:    //13
      countInPauseCountDown = 0;
      break;
  }
}

void processSwitchesWhilePlaying(int footPedal) {
  switch (footPedal) {
    case 0: //This is Foot switch 1 on the FCB1010
      patternComplexity = 0;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 1:
      patternComplexity = 1;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 2:
      patternComplexity = 2;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 3:
      patternComplexity = 3;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 4:
      patternComplexity = 4;
      ExpressionPedalCanUpDateDrumPattern = false;
      setDrums();
      break;
    case 5:
      BPM = BPM - 5;
      screenMode = 1;
      BPMcountDown = 16;
      break;
    case 6:
      BPM = BPM + 5;
      screenMode = 1;
      BPMcountDown = 16;
      break;
    case 7:
      BPM = BPM - 1;
      screenMode = 1;
      BPMcountDown = 16;
      break;
    case switch9:  //8
      BPM = BPM + 1;
      screenMode = 1;
      BPMcountDown = 16;
      break;
    case setStyleSwitch: //9
      screenMode = 2;
      setDrums();
      break;
    case StopStartSwitch: //10 - Stop Start Drums
      if (!drumsOn && countIn)  doTheCountIn();
      drumsOn = !drumsOn;
      if (!drumsOn) {
        screenMode = 4;
        countInPauseCountDown = 50;
      }
      else {
        screenMode = 0;
      }
      beatIndex = 0;
      break;
    case toggleCountInMode:  //11
      countIn = !countIn;
      break;
    case toggleVolumeScreenSwitch:    //12
      if (screenMode == 3) screenMode = 0;
      else screenMode = 3;
      break;
    case resetCountDownPauseSwitch:    //13
      countInPauseCountDown = 0;
      break;
    default:
      break;
  }
}

void alterDrumVolumes() {
  //calculate volumes from knob
  for (int i = 0; i < 4; i++) {
    potVals[i] = analogRead(potPin[i]);
    instrumentVolume[i] =  float((potVals[i])) / 500.0;
  }
  backUpHiHatVolume = instrumentVolume[2];
}

//// === Play Stuff =========================================================================== Play Stuff

void playbeats() {
  //auto mix hihat louder for quiet complexities
  if (patternComplexity == 0 && beatStyle < 2 ) instrumentVolume[2] = 1.5;
  else instrumentVolume[2] = backUpHiHatVolume;

  if (kickSequence[beatIndex] == 'x') playMemKick.play(Acoustickick);
  if (snareSequence[beatIndex] == 'x') playMemSnare.play(AcousticSnare);
  if (hiHatSequence[beatIndex] == 'x') playMemCHh.play(AcousticClosedhihat);
  if (openHiHatSequence[beatIndex] == 'x') playMemOHh.play(AcousticOpenhihat);
  if (crashSequence[beatIndex] == 'x') playMemCrash.play(AcousticCrashcymbal);
  if (rideSequence[beatIndex] == 'x') playMemRide.play(Acousticridecymbal);

  //Probabilistic Beats
  if (kickSequence[beatIndex] == 'p' && random(4) < beatProbability) playMemKick.play(Acoustickick);
  if (snareSequence[beatIndex] == 'p' && random(4) < beatProbability) playMemSnare.play(AcousticSnare);
  if (hiHatSequence[beatIndex] == 'p' && random(4) < beatProbability) playMemCHh.play(AcousticClosedhihat);
  if (openHiHatSequence[beatIndex] == 'p' && random(4) < beatProbability) playMemOHh.play(AcousticOpenhihat);
  if (crashSequence[beatIndex] == 'p' && random(4) < beatProbability) playMemCrash.play(AcousticCrashcymbal);
  if (rideSequence[beatIndex] == 'p' && random(4) < beatProbability) playMemRide.play(Acousticridecymbal);

  //choke Open HiHat if closed Hi Hat is played
  if (hiHatSequence[beatIndex] == 'x') {
    if (playMemOHh.isPlaying() ) playMemOHh.stop();
  }

  beatIndex++;
  if (beatIndex >= barLength[beatStyle]) {
    beatIndex = 0;
  }
  //5/4 style has one 4/4 selection so I can mix them easily in the one song
  if (beatStyle == 6 && patternComplexity == 4 && beatIndex >= 16) {
    beatIndex = 0;
  }
}

// === Misc ===========================================================================

bool switchJustPressed(int i) {
  if (previousSwitchValues[i] == HIGH && switchValues[i] == LOW) return true;           //just pressed
  return false;
}

bool switchJustReleased(int i) {
  if (previousSwitchValues[i] == LOW && switchValues[i] == HIGH) return true;           //Just Released
  return false;
}

//---- Check a switch -----------------------------------------------------
bool isSwitchPressed(int i) { //Checks to see if a switch has just been pressed.
  bool pressedIt = false;
  //check the switch ------------------------------
  switchValues[i] = digitalRead(switchPins[i]);
  //Switch pressed?
  if (switchJustPressed(i)) {
    pressedIt = true;
    previousSwitchValues[i] = LOW;
  }
  //Switch released?
  if (switchJustReleased(i)) {
    previousSwitchValues[i] = HIGH;
  }
  return pressedIt;
}

void setinstrumentVolumes() {
  mixerOut.gain(1, instrumentVolume[0]);            //Kick
  mixerOut.gain(2, instrumentVolume[1]);            //Snare
  mixerOut.gain(3, 1.0);                            //From mixerDrums
  mixerDrums.gain(0, instrumentVolume[2]);          //Closed Hi Hat
  mixerDrums.gain(1, 0.3 * instrumentVolume[2]);    //Open Hi Hat
  mixerDrums.gain(2, instrumentVolume[3]);          //Crash
  mixerDrums.gain(3, instrumentVolume[3]);          //Ride
}

void checkExpressionPedals() {
  //read expression pedals
  potVals[4] = analogRead(potPin[4]);
  potVals[5] = analogRead(potPin[5]);

  //patternComplexity
  int newpatternComplexity = int(float(potVals[4]) / 1023 * 4) + 1;
  if (newpatternComplexity > 4) newpatternComplexity = 4;
  if (newpatternComplexity < 1) newpatternComplexity = 1;
  if (newpatternComplexity == patternComplexity) ExpressionPedalCanUpDateDrumPattern = true; //When Expression pedal hits current value it is enabled
  if (ExpressionPedalCanUpDateDrumPattern) {
    patternComplexity = newpatternComplexity;
    setDrums();
  }

  //Drum Probability Amount  - Humanity
  beatProbability =  map(potVals[5], 10, 1023, 0, 4);
}

// === Drums ===================================================

void doTheCountIn() {
  mixerDrums.gain(0, 1.2); //Set Closed Hi Hat Volume for count in
  if (countInPauseCountDown > 0) return; //allows for quick restart if still in free play mode
  int waitTimeAdjusted = waitTime;
  if (barLength[beatStyle] == 24) waitTimeAdjusted = int(waitTime * 3 / 2);
  display.clearDisplay();
  display.setTextSize(3);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Count");
  display.display();
  delay(waitTimeAdjusted * 8);

  playMemCHh.play(AcousticClosedhihat);
  display.setCursor(0, 40);
  display.println("1");
  display.display();
  delay(waitTimeAdjusted * 8);
  playMemCHh.play(AcousticClosedhihat);
  display.setCursor(20, 40);
  display.println("2");
  display.display();
  delay(waitTimeAdjusted * 8);
  int temp = digitalRead(switchPins[10]);

  if (temp == 0) {
    drumsOn = true;
    return;
  }

  playMemCHh.play(AcousticClosedhihat);
  display.setCursor(40, 40);
  display.println("1");
  display.display();
  delay(waitTimeAdjusted * 4);
  playMemCHh.play(AcousticClosedhihat);
  display.setCursor(60, 40);
  display.println("2");
  display.display();
  delay(waitTimeAdjusted * 4);
  playMemCHh.play(AcousticClosedhihat);
  display.setCursor(80, 40);
  display.println("3");
  display.display();
  delay(waitTimeAdjusted * 4);
  playMemCHh.play(AcousticClosedhihat);
  display.setCursor(100, 40);
  display.println("4");
  display.display();
  delay(waitTimeAdjusted * 4);
  beatIndex = 0;
  mixerDrums.gain(0, instrumentVolume[2]); //reset Closed Hi Hat volume
}

//=== easter eggs ================================================================
void someoneToldAJoke() {
  display.clearDisplay();
  display.setTextSize(4);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 00);
  display.println("badum tish");
  display.display();
  //Boom Tish
  playMemKick.play(Acoustickick);
  delay(100);
  playMemSnare.play(AcousticSnare);
  delay(200);
  playMemCrash.play(AcousticCrashcymbal);
  delay(1000);
}

void playBigEnding() {
  display.clearDisplay();
  display.setTextSize(4);
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.setCursor(0, 0);
  display.println("BIG");
  display.println("End..");
  display.display();
  int waitTime2 = waitTime * 5;
  if (BPM > 130) waitTime2 = 575;
  playMemKick.play(Acoustickick);
  delay(waitTime2 / 3);
  playMemKick.play(Acoustickick);
  delay(waitTime2 / 3);
  playMemSnare.play(AcousticSnare);
  delay(waitTime2 / 3);
  playMemKick.play(Acoustickick);
  delay(waitTime2 / 3);
  playMemKick.play(Acoustickick);
  delay(waitTime2 / 3);
  playMemSnare.play(AcousticSnare);
  delay(waitTime2);

  playMemKick.play(Acoustickick);
  playMemSnare.play(AcousticSnare);
  playMemOHh.play(AcousticOpenhihat);
  delay(waitTime2);

  playMemSnare.play(AcousticSnare);
  playMemOHh.play(AcousticOpenhihat);
  delay(waitTime2);

  playMemKick.play(Acoustickick);
  playMemSnare.play(AcousticSnare);
  playMemCrash.play(AcousticCrashcymbal);
  delay(waitTime2);
}

// ==== Drum Patterns ==============================================================
void setDrums() {
  // 4/4 - Bop - Black Keys - Beatles Happy Rock
  if (beatStyle == 0) {
    switch (patternComplexity) {
      case 0:
        strcpy(kickSequence,       "x.............p.");
        strcpy(snareSequence,      "................");
        strcpy(hiHatSequence,      "p...x...x...x...");
        strcpy(openHiHatSequence,  "x...............");
        strcpy(crashSequence,      "................");
        strcpy(rideSequence,       "................");
        break;
      case 1:
        strcpy(kickSequence,       "x.......x.....p.");
        strcpy(snareSequence,      "....x.x.....x.p.");
        strcpy(hiHatSequence,      "x...x...x...x...");
        strcpy(openHiHatSequence,  "................");
        strcpy(crashSequence,      "................");
        strcpy(rideSequence,       "................");
        break;
      case 2:
        //                          x...x...x...x...
        strcpy(kickSequence,       "x.......x.x...p.");
        strcpy(snareSequence,      "....x.p.....x.x.");
        strcpy(hiHatSequence,      "x...x...x...x...");
        strcpy(openHiHatSequence,  "................");
        strcpy(crashSequence,      "p...............");
        strcpy(rideSequence,       "................");
        break;
      case 3:
        strcpy(kickSequence,       "x.....x.x.....p.");
        strcpy(snareSequence,      "....x.x.....x.p.");
        strcpy(hiHatSequence,      "..x.x.x.x.x.x.x.");
        strcpy(openHiHatSequence,  "x...............");
        strcpy(crashSequence,      "p...............");
        strcpy(rideSequence,       "................");
        break;
      case 4:
        strcpy(kickSequence,       "x.....p.x...x.x.");
        strcpy(snareSequence,      "....x.x.....x.p.");
        strcpy(hiHatSequence,      "..x.x.x...x.x.x.");
        strcpy(openHiHatSequence,  "x.......x.......");
        strcpy(crashSequence,      "x.......p.....x.");
        strcpy(rideSequence,       "................");
        break;
      default:
        break;
    }
  }
  //Rock
  if (beatStyle == 1) {
    switch (patternComplexity) {
      case 0:
        strcpy(kickSequence,       "x...............");
        strcpy(snareSequence,      "................");
        strcpy(hiHatSequence,      "x...x.p.x...x...");
        strcpy(openHiHatSequence,  "x...............");
        strcpy(crashSequence,      "................");
        strcpy(rideSequence,       "p...............");
        break;
      case 1:
        strcpy(kickSequence,       "x.....p.x.....p.");
        strcpy(snareSequence,      "....x.......x...");
        strcpy(hiHatSequence,      "x.p.x...x...x...");
        strcpy(openHiHatSequence,  "..........p.....");
        strcpy(crashSequence,      "................");
        strcpy(rideSequence,       "................");
        break;
      case 2:
        strcpy(kickSequence,       "x.....p.x.......");
        strcpy(snareSequence,      "....x.......x.p.");
        strcpy(hiHatSequence,      "..x.x.x.x.x.x.x.");
        strcpy(openHiHatSequence,  "p...............");
        strcpy(crashSequence,      "p...............");
        strcpy(rideSequence,       "................");
        break;
      case 3:
        strcpy(kickSequence,       "x...p.x.x......p");
        strcpy(snareSequence,      "....x.......x.p.");
        strcpy(hiHatSequence,      "..x.x.x...x.x.x.");
        strcpy(openHiHatSequence,  "x.......p.......");
        strcpy(crashSequence,      "p...............");
        strcpy(rideSequence,       "................");
        break;
      case 4:
        // Double Time - Watch Out
        strcpy(kickSequence,       "x.p.x...x.p.x..p");
        strcpy(snareSequence,      "..x...x...x...x.");
        strcpy(hiHatSequence,      ".px.x.x.x.x.x.x.");
        strcpy(openHiHatSequence,  "x.......x.......");
        strcpy(crashSequence,      "x.......p.......");
        strcpy(rideSequence,       "................");
        break;
      default:
        break;
    }
  }
  // 12/8 beatStyle.
  if (beatStyle == 2) {
    switch (patternComplexity) {
      case 0:
        strcpy(kickSequence,       "x.......................");
        strcpy(snareSequence,      "........................");
        strcpy(hiHatSequence,      "x.......................");
        strcpy(openHiHatSequence,  "........................");
        strcpy(crashSequence,      "........................");
        strcpy(rideSequence,       "x.....x.....x.....x.....");
        break;
      case 1:
        strcpy(kickSequence,       "x...........x...........");
        strcpy(snareSequence,      "........................");
        strcpy(hiHatSequence,      "x...x.x...x.x...x.x...x.");
        strcpy(openHiHatSequence,  "........................");
        strcpy(crashSequence,      "........................");
        strcpy(rideSequence,       "x.......................");
        break;
      case 2:
        strcpy(kickSequence,       "x...p.....x.x.........p.");
        strcpy(snareSequence,      "......x...........x.....");
        strcpy(hiHatSequence,      "..x.x.x.x.x...x.x.x.x.x.");
        strcpy(openHiHatSequence,  "p...........x...........");
        strcpy(crashSequence,      "p.......................");
        strcpy(rideSequence,       "........................");
        break;
      case 3:
        strcpy(kickSequence,       "x...p.....x.x...p.....x.");
        strcpy(snareSequence,      "......x...........x.....");
        strcpy(hiHatSequence,      "..x.x.x.x.x...x.x.x.x.x.");
        strcpy(openHiHatSequence,  "x...........x...........");
        strcpy(crashSequence,      "p.......................");
        strcpy(rideSequence,       "........................");
        break;
      case 4:
        strcpy(kickSequence,       "x...p.....x.x.........x.");
        strcpy(snareSequence,      "......x.........p.x.....");
        strcpy(hiHatSequence,      "..x.x...x.x...x.x...x.x.");
        strcpy(openHiHatSequence,  "x.....x.....p.....x.....");
        strcpy(crashSequence,      "p.....................x.");
        strcpy(rideSequence,       "x...p.x...p.x...p.x.....");
        break;
      default:
        break;
    }
  }
  //Jazz
  if (beatStyle == 3) {
    switch (patternComplexity) {
      case 0:
        strcpy(kickSequence,       "x..............p");
        strcpy(snareSequence,      "................");
        strcpy(hiHatSequence,      "....x.......x...");
        strcpy(openHiHatSequence,  "...p............");
        strcpy(crashSequence,      "................");
        strcpy(rideSequence,       "................");
        break;
      case 1:
        strcpy(kickSequence,       "x.......x......p");
        strcpy(snareSequence,      "................");
        strcpy(hiHatSequence,      "....x.......x...");
        strcpy(openHiHatSequence,  "...p............");
        strcpy(crashSequence,      "................");
        strcpy(rideSequence,       "x......px......x");
        break;
      case 2:
        strcpy(kickSequence,       "x.......x.......");
        strcpy(snareSequence,      "....p...........");
        strcpy(hiHatSequence,      "....x......px...");
        strcpy(openHiHatSequence,  "...p............");
        strcpy(crashSequence,      "................");
        strcpy(rideSequence,       "x..px..xx..px..x");
        break;
      case 3:
        strcpy(kickSequence,       "x.......x.......");
        strcpy(snareSequence,      "....p.......p...");
        strcpy(hiHatSequence,      "....x......px...");
        strcpy(openHiHatSequence,  "...p............");
        strcpy(crashSequence,      "................");
        strcpy(rideSequence,       "x...x..xx..xx..x");
        break;
      case 4:
        strcpy(kickSequence,       "x...x..xx...x..x");
        strcpy(snareSequence,      "....p.......p...");
        strcpy(hiHatSequence,      "....x......px...");
        strcpy(openHiHatSequence,  "...p.......x....");
        strcpy(crashSequence,      "x......xx......p");
        strcpy(rideSequence,       "x..xx..xx..xx..x");
        break;
      default:
        break;
    }
  }
  // 4/4 Swing Feel.
  if (beatStyle == 4) {
    switch (patternComplexity) {
      case 0:
        strcpy(kickSequence,       "x.....................p.");
        strcpy(snareSequence,      "........................");
        strcpy(hiHatSequence,      "x.....x.....x.....x.....");
        strcpy(openHiHatSequence,  "x.......................");
        strcpy(crashSequence,      "........................");
        strcpy(rideSequence,       "........................");
        break;
      case 1:
        strcpy(kickSequence,       "x.........x.x...p.....x.");
        strcpy(snareSequence,      "......x...........x.....");
        strcpy(hiHatSequence,      ".x....x...x.x.....x...x.");
        strcpy(openHiHatSequence,  "p.......................");
        strcpy(crashSequence,      "........................");
        strcpy(rideSequence,       "........................");
        break;
      case 2:
        strcpy(kickSequence,       "x...p.....x.x...p.....x.");
        strcpy(snareSequence,      "......x...........x...x.");
        strcpy(hiHatSequence,      "x.....x...x.x.....x.....");
        strcpy(openHiHatSequence,  "....p...................");
        strcpy(crashSequence,      "........................");
        strcpy(rideSequence,       "p.......................");
        break;
      case 3:
        strcpy(kickSequence,       "x...p.....x.x...p.....x.");
        strcpy(snareSequence,      "......x...........x.....");
        strcpy(hiHatSequence,      ".p....x...x.x.....x...x.");
        strcpy(openHiHatSequence,  "x.......................");
        strcpy(crashSequence,      "........................");
        strcpy(rideSequence,       "x.....p...x.x.....x...x.");
        break;
      case 4:
        strcpy(kickSequence,       "x...p.....x.x...p.....x.");
        strcpy(snareSequence,      "......x...........x.....");
        strcpy(hiHatSequence,      ".p..x.x...x.....x.x...x.");
        strcpy(openHiHatSequence,  "x...........x...........");
        strcpy(crashSequence,      "x...........p...........");
        strcpy(rideSequence,       "x.....p...x.x...p.x...x.");
        break;
      default:
        break;
    }
  }
  // Misc.
  if (beatStyle == 5) {
    switch (patternComplexity) {
      case 0:
        // We will rock you
        strcpy(kickSequence,       "x.x.....x.x.....");
        strcpy(snareSequence,      "....x.......x...");
        strcpy(hiHatSequence,      "................");
        strcpy(openHiHatSequence,  "................");
        strcpy(crashSequence,      "....p.......p...");
        strcpy(rideSequence,       "................");
        break;
      case 1:
        // White Stripes Just Kick
        strcpy(kickSequence,       "x...x...x...x...");
        strcpy(snareSequence,      "................");
        strcpy(hiHatSequence,      ".x..............");
        strcpy(openHiHatSequence,  "x...............");
        strcpy(crashSequence,      "................");
        strcpy(rideSequence,       "................");
        break;
      case 2:
        // White Stripes Main Beat
        strcpy(kickSequence,       "x...x...x...x...");
        strcpy(snareSequence,      "....x.......x...");
        strcpy(hiHatSequence,      "x...x...x...x...");
        strcpy(openHiHatSequence,  "................");
        strcpy(crashSequence,      "p.......p.......");
        strcpy(rideSequence,       "................");
        break;
      case 3:
        strcpy(kickSequence,        "x.....x.x.....p.");
        strcpy(snareSequence,       "....x.p.....x...");
        strcpy(hiHatSequence,       "..x.x.x.x.x.x.x.");
        strcpy(openHiHatSequence,   "x...............");
        strcpy(crashSequence,       "p...............");
        strcpy(rideSequence,        "................");
        break;
      case 4:
        strcpy(kickSequence,        "x.....x.x.....x.");
        strcpy(snareSequence,       "....x.....p.x...");
        strcpy(hiHatSequence,       "..x.x.x...x.x.x.");
        strcpy(openHiHatSequence,   "x.......x.......");
        strcpy(crashSequence,       "x.......p.....p.");
        strcpy(rideSequence,        "................");
        break;
      default:
        break;
    }
  }
  // 5/4
  if (beatStyle == 6) {
    switch (patternComplexity) {
      case 0:
        // Quiet
        strcpy(kickSequence,       "x...................");
        strcpy(snareSequence,      "....................");
        strcpy(hiHatSequence,      "x...x...x...x...x...");
        strcpy(openHiHatSequence,  "....................");
        strcpy(crashSequence,      "....................");
        strcpy(rideSequence,       "p...................");
        break;
      case 1:
        // White Room
        strcpy(kickSequence,       "x...p.......p.......");
        strcpy(snareSequence,      "x...x.x.x...x.x.x...");
        strcpy(hiHatSequence,      "....................");
        strcpy(openHiHatSequence,  "x...................");
        strcpy(crashSequence,      "x...............p...");
        strcpy(rideSequence,       "....................");
        break;
      case 2:
        // 5/4
        strcpy(kickSequence,       "x.....p.x.......x.p.");
        strcpy(snareSequence,      "....x.......x.......");
        strcpy(hiHatSequence,      "xp..x...x...x.......");
        strcpy(openHiHatSequence,  "p...................");
        strcpy(crashSequence,      "p.......p...........");
        strcpy(rideSequence,       "....................");
        break;
      case 3:
        // 5/4
        strcpy(kickSequence,       "x.....x.x.....p.x.p.");
        strcpy(snareSequence,      "....x.p.....x.......");
        strcpy(hiHatSequence,      "..x.x.x.x.x.x.x.x.x.");
        strcpy(openHiHatSequence,  "x...................");
        strcpy(crashSequence,      "p...................");
        strcpy(rideSequence,       "....................");
        break;
      case 4:
        // 4/4 - needs to stop at 16!
        strcpy(kickSequence,       "x.....p.x...........");
        strcpy(snareSequence,      "....x.......x.......");
        strcpy(hiHatSequence,      "x...x...x...x.......");
        strcpy(openHiHatSequence,  "p...................");
        strcpy(crashSequence,      "p...................");
        strcpy(rideSequence,       "....................");
        break;
      default:
        break;
    }
  }
}
